{"version":3,"sources":["../../test/reading_test.js"],"names":["assert","require","User","describe","joe","maria","alex","zach","beforeEach","done","name","Promise","all","save","then","it","find","users","_id","toString","findOne","user","sort","skip","limit","length"],"mappings":";;AAAA;;;AAGA,IAAMA,SAASC,QAAQ,QAAR,CAAf;AACA;AACA,IAAMC,OAAOD,QAAQ,aAAR,CAAb;;AAEAE,SAAS,mCAAT,EAA8C,YAAM;AAChD,QAAIC,YAAJ;AAAA,QAASC,cAAT;AAAA,QAAgBC,aAAhB;AAAA,QAAsBC,aAAtB;AACAC,eAAW,UAACC,IAAD,EAAU;AACjB;AACAH,eAAO,IAAIJ,IAAJ,CAAS,EAACQ,MAAM,MAAP,EAAT,CAAP;AACAN,cAAM,IAAIF,IAAJ,CAAS,EAACQ,MAAM,KAAP,EAAT,CAAN;AACAL,gBAAQ,IAAIH,IAAJ,CAAS,EAACQ,MAAM,OAAP,EAAT,CAAR;AACAH,eAAO,IAAIL,IAAJ,CAAS,EAACQ,MAAM,MAAP,EAAT,CAAP;;AAEAC,gBAAQC,GAAR,CAAY,CAACN,KAAKO,IAAL,EAAD,EAAcT,IAAIS,IAAJ,EAAd,EAA0BR,MAAMQ,IAAN,EAA1B,EAAwCN,KAAKM,IAAL,EAAxC,CAAZ,EACKC,IADL,CACU;AAAA,mBAAML,MAAN;AAAA,SADV;AAEH,KATD;;AAWAM,OAAG,sCAAH,EAA2C,UAACN,IAAD,EAAU;AACjDP,aAAKc,IAAL,CAAU,EAACN,MAAM,KAAP,EAAV,EACKI,IADL,CACU,UAACG,KAAD,EAAW;AACjB;AACI;AACJjB,mBAAOiB,MAAM,CAAN,EAASC,GAAT,CAAaC,QAAb,OAA4Bf,IAAIc,GAAJ,CAAQC,QAAR,EAAnC;AACAV;AACH,SAND;AAOH,KARD;;AAUAM,OAAG,kCAAH,EAAuC,UAACN,IAAD,EAAU;AAC7CP,aAAKkB,OAAL,CAAa,EAAEF,KAAKd,IAAIc,GAAX,EAAb,EACKJ,IADL,CACU,UAACO,IAAD,EAAU;AACZrB,mBAAOqB,KAAKX,IAAL,KAAc,KAArB;AACAD;AACH,SAJL;AAKH,KAND;;AAQAM,OAAG,mCAAH,EAAwC,UAACN,IAAD,EAAU;AAC9C;AACAP,aAAKc,IAAL,CAAU,EAAV;AACA;AADA,SAEKM,IAFL,CAEU,EAACZ,MAAM,CAAP,EAFV,EAGKa,IAHL,CAGU,CAHV,EAIKC,KAJL,CAIW,CAJX,EAKKV,IALL,CAKU,UAACG,KAAD,EAAW;AACbjB,mBAAOiB,MAAMQ,MAAN,KAAiB,CAAxB;AACAzB,mBAAOiB,MAAM,CAAN,EAASP,IAAT,KAAkB,KAAlB,IAA2BO,MAAM,CAAN,EAASP,IAAT,KAAkB,OAApD;AACAD;AACH,SATL;AAUH,KAZD;AAaH,CA5CD","file":"reading_test.js","sourcesContent":["/**\n * Created by david on 4/21/17.\n */\nconst assert = require('assert');\n// these asserts are for checking only\nconst User = require('../src/user');\n\ndescribe('reading users out of the database', () => {\n    let joe, maria, alex, zach;\n    beforeEach((done) => {\n        // this joe variable is a global var just so we can call it outside of this function\n        alex = new User({name: 'Alex'});\n        joe = new User({name: 'Joe'});\n        maria = new User({name: 'Maria'});\n        zach = new User({name: 'Zach'});\n\n        Promise.all([alex.save(), joe.save(), maria.save(), zach.save()])\n            .then(() => done());\n    });\n\n    it('finds all users with the name of joe', (done) => {\n        User.find({name: \"Joe\"})\n            .then((users) => {\n            // in moongoose _id is actually an objectId(\"_id\"). run toString() to pull it out\n                // it's not a raw string until you toString it\n            assert(users[0]._id.toString() === joe._id.toString());\n            done();\n        });\n    });\n\n    it('find a user with a particular id', (done) => {\n        User.findOne({ _id: joe._id })\n            .then((user) => {\n                assert(user.name === 'Joe');\n                done();\n            })\n    });\n\n    it('can skip and limit the result set', (done) => {\n        // passing in a {} is like *.  It means no filter.\n        User.find({})\n        //this sort means sort by name in acceding order. -1 for descending\n            .sort({name: 1})\n            .skip(1)\n            .limit(2)\n            .then((users) => {\n                assert(users.length === 2);\n                assert(users[0].name === \"Joe\" && users[1].name === \"Maria\");\n                done();\n            });\n    });\n});"]}