{"version":3,"sources":["../../test/update_test.js"],"names":["assert","require","User","describe","joe","beforeEach","done","name","likes","save","then","assertName","operation","find","users","length","it","set","update","findOneAndUpdate","findByIdAndUpdate","_id","currentCount","$inc","findOne","user"],"mappings":";;AAAA;;;AAGA,IAAMA,SAASC,QAAQ,QAAR,CAAf;AACA;AACA,IAAMC,OAAOD,QAAQ,aAAR,CAAb;;AAEAE,SAAS,kBAAT,EAA6B,YAAM;AAC/B,QAAIC,YAAJ;;AAEAC,eAAW,UAACC,IAAD,EAAU;AAClBF,cAAM,IAAIF,IAAJ,CAAS,EAACK,MAAM,KAAP,EAAcC,OAAO,CAArB,EAAT,CAAN;AACAJ,YAAIK,IAAJ,GACKC,IADL,CACU;AAAA,mBAAMJ,MAAN;AAAA,SADV;AAEF,KAJD;;AAOA,aAASK,UAAT,CAAoBC,SAApB,EAA+BN,IAA/B,EAAqC;AACjCM,kBACKF,IADL,CACU;AAAA,mBAAMR,KAAKW,IAAL,CAAU,EAAV,CAAN;AAAA,SADV,EAC+B;AAD/B,SAEKH,IAFL,CAEU,UAACI,KAAD,EAAW;AACbd,mBAAOc,MAAMC,MAAN,KAAiB,CAAxB;AACAf,mBAAOc,MAAM,CAAN,EAASP,IAAT,KAAkB,MAAzB;AACAD;AACH,SANL;AAOH;;AAED;;AAEAU,OAAG,gCAAH,EAAqC,UAACV,IAAD,EAAU;AAC3CF,YAAIa,GAAJ,CAAQ,MAAR,EAAgB,MAAhB;AACAN,mBAAWP,IAAIK,IAAJ,EAAX,EAAuBH,IAAvB;AACH,KAHD;;AAKAU,OAAG,6BAAH,EAAkC,UAACV,IAAD,EAAU;AACxCK,mBAAWP,IAAIc,MAAJ,CAAW,EAACX,MAAM,MAAP,EAAX,CAAX,EAAuCD,IAAvC;AACH,KAFD;;AAIAU,OAAG,0BAAH,EAA+B,UAACV,IAAD,EAAU;AACrCK,mBACIT,KAAKgB,MAAL,CAAY,EAACX,MAAM,KAAP,EAAZ,EAA2B,EAACA,MAAM,MAAP,EAA3B,CADJ,EAEID,IAFJ;AAIH,KALD;;AAOAU,OAAG,qCAAH,EAA0C,UAACV,IAAD,EAAU;AAChDK,mBACIT,KAAKiB,gBAAL,CAAsB,EAACZ,MAAM,KAAP,EAAtB,EAAqC,EAACA,MAAM,MAAP,EAArC,CADJ,EAEID,IAFJ;AAIH,KALD;;AAOAU,OAAG,yCAAH,EAA8C,UAACV,IAAD,EAAU;AACpDK,mBACIT,KAAKkB,iBAAL,CAAuBhB,IAAIiB,GAA3B,EAAgC,EAACd,MAAM,MAAP,EAAhC,CADJ,EAEID,IAFJ;AAIH,KALD;;AAOA;;AAEAU,OAAG,2BAAH,EAAgC,UAACV,IAAD,EAAU;AACtC,YAAIgB,eAAelB,IAAII,KAAvB;AACA;AACAN,aAAKgB,MAAL,CAAY,EAACX,MAAM,KAAP,EAAZ,EAA2B,EAAEgB,MAAM,EAACf,OAAO,CAAR,EAAR,EAA3B,EACKE,IADL,CACU;AAAA,mBAAMR,KAAKsB,OAAL,CAAa,EAACjB,MAAM,KAAP,EAAb,CAAN;AAAA,SADV,EAEKG,IAFL,CAEU,UAACe,IAAD,EAAU;AACZzB,mBAAOyB,KAAKjB,KAAL,KAAec,eAAe,CAArC;AACAhB;AACP,SALD;AAMH,KATD;AAUH,CAhED","file":"update_test.js","sourcesContent":["/**\n * Created by david on 4/22/17.\n */\nconst assert = require('assert');\n// these asserts are for checking only\nconst User = require('../src/user');\n\ndescribe('Updating records', () => {\n    let joe;\n\n    beforeEach((done) => {\n       joe = new User({name: 'Joe', likes: 5});\n       joe.save()\n           .then(() => done());\n    });\n\n\n    function assertName(operation, done) {\n        operation\n            .then(() => User.find({})) // no critera; get all\n            .then((users) => {\n                assert(users.length === 1);\n                assert(users[0].name === 'Alex');\n                done();\n            });\n    }\n\n    // these both do the same thing\n\n    it('instance type using set n save', (done) => {\n        joe.set('name', \"Alex\");\n        assertName(joe.save(), done);\n    });\n\n    it('a model instance can update', (done) => {\n        assertName(joe.update({name: 'Alex'}), done);\n    });\n\n    it('a model class can update', (done) => {\n        assertName(\n            User.update({name: 'Joe'}, {name: 'Alex'}),\n            done\n        );\n    });\n\n    it('a model class can update one record', (done) => {\n        assertName(\n            User.findOneAndUpdate({name: 'Joe'}, {name: 'Alex'}),\n            done\n        );\n    });\n\n    it('a model class can with an id and update', (done) => {\n        assertName(\n            User.findByIdAndUpdate(joe._id, {name: 'Alex'}),\n            done\n        );\n    });\n\n    // part 2\n\n    it('increment user likes by 1', (done) => {\n        let currentCount = joe.likes;\n        // $inc is an update operator.  you can also use it to decrement\n        User.update({name: 'Joe'}, { $inc: {likes: 1} })\n            .then(() => User.findOne({name: 'Joe'}))\n            .then((user) => {\n                assert(user.likes === currentCount + 1);\n                done();\n        });\n    });\n});"]}