{"version":3,"sources":["../../test/association_test.js"],"names":["mongoose","require","assert","User","Comment","BlogPost","describe","joe","blogPost","comment","beforeEach","done","name","title","content","blogPosts","push","comments","user","Promise","all","save","then","it","findOne","populate","path","model"],"mappings":";;AAAA;;;AAGA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,IAAMC,SAASD,QAAQ,QAAR,CAAf;AACA,IAAME,OAAOF,QAAQ,aAAR,CAAb;AACA,IAAMG,UAAUH,QAAQ,gBAAR,CAAhB;AACA,IAAMI,WAAWJ,QAAQ,iBAAR,CAAjB;;AAEAK,SAAS,cAAT,EAAyB,YAAM;AAC3B,QAAIC,YAAJ;AAAA,QAASC,iBAAT;AAAA,QAAmBC,gBAAnB;AACAC,eAAW,UAACC,IAAD,EAAU;AACjB;AACAJ,cAAM,IAAIJ,IAAJ,CAAS,EAACS,MAAM,KAAP,EAAT,CAAN;AACAJ,mBAAW,IAAIH,QAAJ,CAAa,EAACQ,OAAO,aAAR,EAAuBC,SAAS,gBAAhC,EAAb,CAAX;AACAL,kBAAU,IAAIL,OAAJ,CAAY,EAACU,SAAS,kBAAV,EAAZ,CAAV;;AAEA;;AAEA;AACA;AACA;AACAP,YAAIQ,SAAJ,CAAcC,IAAd,CAAmBR,QAAnB;AACA;AACAA,iBAASS,QAAT,CAAkBD,IAAlB,CAAuBP,OAAvB;AACA;AACAA,gBAAQS,IAAR,GAAeX,GAAf;;AAEA;;AAEA;AACA;AACA;;AAEAY,gBAAQC,GAAR,CAAY,CAACb,IAAIc,IAAJ,EAAD,EAAab,SAASa,IAAT,EAAb,EAA8BZ,QAAQY,IAAR,EAA9B,CAAZ,EACKC,IADL,CACU;AAAA,mBAAMX,MAAN;AAAA,SADV;AAEH,KAzBD;;AA2BAY,OAAG,gDAAH,EAAqD,UAACZ,IAAD,EAAU;AAC3DR,aAAKqB,OAAL,CAAa,EAACZ,MAAM,KAAP,EAAb;AACA;AADA,SAEKa,QAFL,CAEc,WAFd,EAGKH,IAHL,CAGU,UAACJ,IAAD,EAAU;;AAEZhB,mBAAOgB,KAAKH,SAAL,CAAe,CAAf,EAAkBF,KAAlB,KAA4B,aAAnC;AACAF;AACH,SAPL;AAQH,KATD;;AAWA;AACAY,OAAG,6BAAH,EAAkC,UAACZ,IAAD,EAAU;AACxCR,aAAKqB,OAAL,CAAa,EAACZ,MAAM,KAAP,EAAb,EACKa,QADL,CACc;AACN;AACAC,kBAAM,WAFA;AAGN;AACAD,sBAAU;AACNC,sBAAM,UADA;AAEN;AACAC,uBAAO,SAHD;AAINF,0BAAU;AACNC,0BAAM,MADA;AAENC,2BAAO;AAFD;AAJJ;AAJJ,SADd,EAeKL,IAfL,CAeU,UAACJ,IAAD,EAAU;AACZhB,mBAAOgB,KAAKN,IAAL,KAAc,KAArB;AACAV,mBAAOgB,KAAKH,SAAL,CAAe,CAAf,EAAkBF,KAAlB,KAA4B,aAAnC;AACAX,mBAAOgB,KAAKH,SAAL,CAAe,CAAf,EAAkBE,QAAlB,CAA2B,CAA3B,EAA8BH,OAA9B,KAA0C,kBAAjD;AACAZ,mBAAOgB,KAAKH,SAAL,CAAe,CAAf,EAAkBE,QAAlB,CAA2B,CAA3B,EAA8BC,IAA9B,CAAmCN,IAAnC,KAA4C,KAAnD;AACAD;AACH,SArBL;AAsBH,KAvBD;AAwBH,CAjED","file":"association_test.js","sourcesContent":["/**\n * Created by david on 4/23/17.\n */\nconst mongoose = require('mongoose');\nconst assert = require('assert');\nconst User = require('../src/user');\nconst Comment = require('../src/comment');\nconst BlogPost = require('../src/blogPost');\n\ndescribe('associations', () => {\n    let joe, blogPost, comment;\n    beforeEach((done) => {\n        // nothing is done here to associate any of these items with each other\n        joe = new User({name: 'Joe'});\n        blogPost = new BlogPost({title: 'JS is Great', content: 'Sure is buddy.'});\n        comment = new Comment({content: 'Great assertion!'});\n\n        // lets associate these items here; lets setup some relations\n\n        //be careful blogPosts is part of the joe model and blogPost is the var from above\n        // so we aren't really pushing this to joe.blogPosts but really just a reference...i think\n        // a user has many blogPosts\n        joe.blogPosts.push(blogPost);\n        // a blogPost can have many comments\n        blogPost.comments.push(comment);\n        // a comment has a singe user\n        comment.user = joe;\n\n        //* comment.user doesn't really = joe mongoose is just setting up references\n\n        // now lets send this all off to the db\n        // time for some es6 magic for an array of promises combined into a single promise\n        // frequently used when setting up associations\n\n        Promise.all([joe.save(), blogPost.save(), comment.save()])\n            .then(() => done());\n    });\n\n    it('saves a relation between a user and a blogpost', (done) => {\n        User.findOne({name: 'Joe'})\n        // populate allows you to add associated 'blogPosts' with 'Joe' to the findOne results.  Thus, user now has Joe's blogPosts attached.  'blogPosts' are ref'd in the user model and must be to work\n            .populate('blogPosts')\n            .then((user) => {\n\n                assert(user.blogPosts[0].title === 'JS is Great');\n                done();\n            });\n    });\n\n    // this is how you get deeper and deeper into the object.  populate/path repeat\n    it('saves a full relation graph', (done) => {\n        User.findOne({name: 'Joe'})\n            .populate({\n                // path looks into joe find blogPosts\n                path: 'blogPosts',\n                // inside of the blogPosts load up an additional association\n                populate: {\n                    path: 'comments',\n                    // mongoose needs to know from which model here when we looking for something nested in something\n                    model: 'comment',\n                    populate: {\n                        path: 'user',\n                        model: 'user'\n                    }\n                }\n            })\n            .then((user) => {\n                assert(user.name === 'Joe');\n                assert(user.blogPosts[0].title === \"JS is Great\");\n                assert(user.blogPosts[0].comments[0].content === 'Great assertion!');\n                assert(user.blogPosts[0].comments[0].user.name === 'Joe');\n                done();\n            });\n    });\n});"]}