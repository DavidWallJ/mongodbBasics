{"version":3,"sources":["../../src/user.js"],"names":["mongoose","require","PostSchema","Schema","UserSchema","name","type","String","validate","validator","length","message","required","posts","likes","Number","blogPosts","Types","ObjectId","ref","virtual","get","pre","next","BlogPost","model","remove","_id","$in","then","User","module","exports"],"mappings":";;AAAA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,IAAMC,aAAaD,QAAQ,cAAR,CAAnB;AACA,IAAME,SAASH,SAASG,MAAxB;;AAGA;AACA,IAAMC,aAAa,IAAID,MAAJ,CAAW;AAC1BE,UAAM;AACFC,cAAMC,MADJ;AAEFC,kBAAU;AACNC,uBAAW,mBAACJ,IAAD;AAAA,uBAAUA,KAAKK,MAAL,GAAc,CAAxB;AAAA,aADL;AAENC,qBAAS;AAFH,SAFR;AAMFC,kBAAU,CAAC,IAAD,EAAO,qBAAP;AANR,KADoB;AAS1B;AACA;AACAC,WAAO,CAACX,UAAD,CAXmB;AAY1BY,WAAOC,MAZmB;AAa1BC,eAAW,CAAC;AACRV,cAAMH,OAAOc,KAAP,CAAaC,QADX;AAER;AACAC,aAAK;AAHG,KAAD;AAbe,CAAX,CAAnB;;AAoBA;AACA;AACAf,WAAWgB,OAAX,CAAmB,WAAnB,EAAgCC,GAAhC,CAAoC,YAAU;AAC1C;AACA,WAAO,KAAKR,KAAL,CAAWH,MAAlB;AACH,CAHD;;AAKA;AACA;AACA;AACAN,WAAWkB,GAAX,CAAe,QAAf,EAAyB,UAASC,IAAT,EAAe;AACpC,QAAMC,WAAWxB,SAASyB,KAAT,CAAe,UAAf,CAAjB;AACA;AACAD,aAASE,MAAT,CAAgB,EAACC,KAAK,EAACC,KAAK,KAAKZ,SAAX,EAAN,EAAhB,EACKa,IADL,CACU;AAAA,eAAMN,MAAN;AAAA,KADV;AAEH,CALD;;AAOA;AACA;AACA,IAAMO,OAAO9B,SAASyB,KAAT,CAAe,MAAf,EAAuBrB,UAAvB,CAAb;;AAEA;AACA2B,OAAOC,OAAP,GAAiBF,IAAjB","file":"user.js","sourcesContent":["const mongoose = require('mongoose');\nconst PostSchema = require('./postSchema');\nconst Schema = mongoose.Schema;\n\n\n// this is the template for the 'user collection\nconst UserSchema = new Schema({\n    name: {\n        type: String,\n        validate: {\n            validator: (name) => name.length > 2,\n            message: 'Name must be longer than 2 characters.'\n        },\n        required: [true, 'User name required.']\n    },\n    // this is how you bring in the schema from an other file and embed it within this model\n    // posts aren't the same as blogPosts.  all for demo purposes.  this is a subdocuments/subtype/etc example\n    posts: [PostSchema],\n    likes: Number,\n    blogPosts: [{\n        type: Schema.Types.ObjectId,\n        // this ref shows where these blog posts will be coming from\n        ref: 'blogPost'\n    }]\n});\n\n// defining a virtual property\n// post count when called is going to behave alike a function and run the function content\nUserSchema.virtual('postCount').get(function(){\n    // we're using function here instead of the fat arrow function because of 'this'.  if you we use the fat arrow function this would point outside of this function\n    return this.posts.length;\n});\n\n// some middleware\n// using this type of function() instead of () => so we can use 'this'\n// next is a mongoose function often used to redirect middleware to the 'next' thing after it's done running\nUserSchema.pre('remove', function(next) {\n    const BlogPost = mongoose.model('blogPost');\n    // instead of looping through the list of posts we can use an $in operator\n    BlogPost.remove({_id: {$in: this.blogPosts}})\n        .then(() => next());\n});\n\n// creates a collection called 'user'\n// User represents the entire collection of data\nconst User = mongoose.model('user', UserSchema);\n\n// only the model class is exported\nmodule.exports = User;"]}